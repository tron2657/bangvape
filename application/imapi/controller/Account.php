<?php
/**
 * 用户限制
 * Created by PhpStorm.
 * User: zxh
 * Date: 2020/3/31
 * Time: 9:20
 */
namespace app\imapi\controller;


use app\admin\model\com\ForumPower;
use app\admin\model\group\Group;
use app\admin\model\system\SystemConfig;
use app\osapi\controller\Base;
use app\osapi\model\common\Blacklist;
use Doctrine\Common\Cache\Cache;
use service\JsonService;
class account extends Base
{
    protected $im_url;//IM入口地址
    protected $data_auth_key='0oUjsKgtAhH2WfNy6B9pbeIDMFYvqx4n3kuElJiG';//加密key
    protected $im_access_token='';//应用的access_token，输入一个字符串，系统将进行加密。

    public function _initialize()
    {

        $open_list=$this->_getClientOpenList();
        if(!in_array('im',$open_list)){
            $this->apiError('未开通私信功能');
        }
        $access_token='shhshshshs';//未产生
        $this->im_access_token=md5(base64_encode($access_token));
        $this->im_url=SystemConfig::getValue('im_url');
        if(! $this->im_url){
            $this->apiError('请配置请求地址');
        }
        $this->im_url.='public/';
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    //获取open_id
    public function getOpenId()
    {
        $open_id = $this->get_open_id_post();
        $this->apiSuccess($open_id);
    }

    //获取用户信息
    public function get_open_id_post()
    {
        $uid=get_uid();
        if(!$uid) return '';
        $user=db('user')->where(['uid'=>$uid])->field('uid,bind_im_uid,nickname,last_time')->find();
        if(!$user['bind_im_uid']){
            $this->register_im($uid);
        }
        $auth =[
            'uid' => $user['bind_im_uid'],
            'username' => $user['nickname'],
            'last_login_time' => $user['last_time'],
            'role_id' => 1,
            'audit' => 1,
            'osx_uid'=>$uid,
            'return_url'=>get_domain(),
        ];
        $open_id = api_encode(implode('|', $auth),$this->data_auth_key);
        return $open_id;
    }

    /**
     * 注册im账号
     * @return bool
     */
    public function register_im($uid=28){
        $uid=$uid?$uid:get_uid();
        if(!$uid) return false;
        $nickname=db('user')->where(['uid'=>$uid])->value('nickname');
        $avatar=db('user')->where(['uid'=>$uid])->value('avatar');
        $code=$this->_getCode();
        $nickname=json_encode($nickname);
        $url=$this->im_url.'api/login/register_im?';
//        $result=file_get_contents($url);
        $data=[
            'osx_uid'=>$uid,
            'nickname'=>$nickname,
            'avatar'=>$avatar,
            'code'=>$code
        ];
        $result=$this->send_post($url,$data);
        $result=json_decode($result,true);
        $result=$result['data'];
        if($result['status']==0){
            $this->apiError($result['info']);
        }
        $bind_im_uid=$result['bind_im_uid'];
        db('user')->where(['uid'=>$uid])->update(['bind_im_uid'=>$bind_im_uid]);
        return $bind_im_uid;
    }

    /**
     * 获取列表信息
     * 2020.7.3
     */
    public function getUserInfo()
    {
        $uid = osx_input('uid', 0, 'intval');
        $uid = $uid > 0 ? $uid : get_uid();
        $data=db('user')->where(['uid'=>$uid])->field('nickname,avatar,bind_im_uid')->cache('im_info_message_'.$uid,3600)->find();
        $data['osx_uid']=$data['uid'];
        $data['uid']=$data['bind_im_uid'];
        $data['code']=$this->_getCode();
        $this->apiSuccess($data);
    }

    /**
     * 聊天
     */
    public function create_chat(){
        $to_uid=osx_input('to_uid',0,'intval');
        if($to_uid<=0){
            $this->apiError(['status'=>0,'info'=>'请选择聊天人']);
        }
        $osx_uid=$this->_needLogin();
        $to_uid_im=db('user')->where(['uid'=>$to_uid])->value('bind_im_uid');
        if(empty($to_uid_im)){
            $to_uid_im=$this->register_im($to_uid);
        }
        $uid_im=db('user')->where(['uid'=>$osx_uid])->value('bind_im_uid');
        if(empty($uid_im)){
            $uid_im=$this->register_im($osx_uid);
        }
        $url=$this->im_url.'api/login/create_chat?';
        $message=[
            'to_uid'=>$to_uid_im,
            'uid'=>$uid_im,
        ];
        $result=$this->send_post($url,$message);
        $result=json_decode($result,true);
        $result=$result['data'];
        if($result['status']==0){
            $this->apiError($result['info']);
        }
        $data['chat_id']=$result['chat_id'];
        $data['to_uid_im']=$to_uid_im;
        $data['uid_im']=$uid_im;
        $this->apiSuccess($data);
    }

  /**
     * 检测是否是否拉黑
     */
    public function check_black(){
        $uid = osx_input('uid', 0, 'intval');
        $to_uid = osx_input('to_uid', 0, 'intval');
        $is_black=Blacklist::isBlack($to_uid,$uid);
        //被拉黑
        $data['be_black']=$is_black>0?1:0;
        $is_black=Blacklist::isBlack($uid,$to_uid);
        //拉黑
        $data['to_black']=$is_black>0?1:0;
        $this->apiSuccess($data);
    }

    public function send_post($url, $post_data) {
        $postData = http_build_query($post_data); //做一层过滤
        $url.=$postData;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
        $result = curl_exec($ch);
        curl_close($ch);

        return $result ;
    }

    public  function get_chat_message(){
        $register=db('message_register')->where(['status'=>1])->order('id desc')->find();
        $register['content']=json_decode( $register['content'],true);
        $register['send_time']=time_to_show($register['send_time']);
        $register['image']=json_decode($register['image'],true);
        $open_id=$this->get_open_id_post();
        $to_uid=1;
        $to_uid_im=db('user')->where(['uid'=>$to_uid])->value('bind_im_uid');
        if(empty($to_uid_im)){
            $to_uid_im=$this->register_im($to_uid);
        }
        $message=[
            'access_token'=>'liner',
            'open_id'=>$open_id,
            'id'=>$to_uid_im,
            'page'=>1,
        ];
        $url=$this->im_url.'api/Message/getChatMessage?';
        $result=$this->send_post($url,$message);
        $result=json_decode($result,true);
        $result=$result['data'];
        $result['register_message']=$register;
        $this->apiSuccess($result);
    }
}